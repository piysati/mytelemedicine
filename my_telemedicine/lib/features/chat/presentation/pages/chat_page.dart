import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:my_telemedicine/features/chat/domain/message_dto.dart';
import 'package:my_telemedicine/features/user_auth/firebase_auth_impl/firebase_firestore_service.dart';

class ChatPage extends StatefulWidget {
  final String appointmentId;

  const ChatPage({super.key, required this.appointmentId});

  @override
  State<ChatPage> createState() => _ChatPageState();
}

class MessageBubble extends StatelessWidget {
  final MessageDTO message;
  final bool isMe;

  const MessageBubble({super.key, required this.message, required this.isMe});

  @override
  Widget build(BuildContext context) {
}

class _ChatPageState extends State<ChatPage> {
  final TextEditingController _messageController = TextEditingController();

  @override
  void dispose() {
    _messageController.dispose();
    super.dispose();
  }

  Stream<List<MessageDTO>> getMessages() {
    return FirebaseFirestore.instance
        .collection('messages')
        .where('appointmentId', isEqualTo: widget.appointmentId)
        .orderBy('timestamp', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => MessageDTO.fromMap(doc.data() as Map<String, dynamic>))
            .toList());
  }

  void _sendMessage() async {
    if (_messageController.text.isNotEmpty) {
      final message = MessageDTO(
        messageId: "", // Will be auto-generated by Firestore
        senderId: FirebaseFirestoreService().getCurrentUser()!.uid,
        receiverId: "", // We'll handle this later (doctor/patient)
        content: _messageController.text,
        timestamp: Timestamp.now(),
        appointmentId: widget.appointmentId,
      );
      await FirebaseFirestoreService().addMessage(message);
      _messageController.clear();
    }
  }

  @override
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Chat"),
      ),
      body: Column(
        children: [
          StreamBuilder<List<MessageDTO>>(
            stream: getMessages(),
            builder: (context, snapshot) {
              if (snapshot.hasError) {
                return const Center(child: Text("Error loading messages"));
              }
              if (!snapshot.hasData) {
                return const Center(child: CircularProgressIndicator());
              }
              final messages = snapshot.data!;
              return Expanded(
                child: ListView.builder(
                  reverse: true,
                  itemCount: messages.length,
                  itemBuilder: (context, index) {
                    final message = messages[index];
                    return ListTile(
                      title: Text(message.content),
                      subtitle: Text(message.senderId),
                    );
                  },
                ),
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _messageController,
                    decoration: const InputDecoration(
                      hintText: "Enter message",
                    ),
                  ),
                ),
                IconButton(
                  icon: const Icon(Icons.send),
                  onPressed: _sendMessage,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}